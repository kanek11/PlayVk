#ifndef PBR_IBL_HLSLI
#define PBR_IBL_HLSLI

#include "BRDF.hlsli"

TextureCube irradianceMap : register(BINDING_IRRADIANCE_CUBE, SPACE_IBL);
TextureCube prefilterMap : register(BINDING_PREFILTER_CUBE, SPACE_IBL);
Texture2D brdfLUT : register(BINDING_BRDF_LUT, SPACE_IBL); 

SamplerState linearWrapSampler : register(SAMPLER_LINEAR_WRAP, SPACE_IBL); 

float3 IBL_Diffuse(float3 N)
{  
    return irradianceMap.Sample(linearWrapSampler, N).rgb;  
}

// Example: IBL Specular from Prefiltered Env and BRDF LUT
float3 IBL_Specular(float3 R, float roughness, float3 N, float3 V)
{
float3 F = FresnelSchlickRoughness(NdotV, F0, roughness);

    float MAX_MIP = 5.0;
    float3 prefiltered = prefilterMap.SampleLevel(linearWrapSampler, R, roughness * MAX_MIP).rgb;
    float2 brdf = brdfLUT.Sample(linearWrapSampler, float2(saturate(dot(N, V)), roughness)).rg;
    float3 specIBL = prefilteredColor * (F * brdf.x + brdf.y);
    
    return specIBL;
}

#endif
